{
	"info": {
		"_postman_id": "proprli-task-api-2025",
		"name": "Proprli Task Management API",
		"description": "Complete API collection for testing the Proprli Task Management System. This collection includes authentication, task management, and comment endpoints with example requests and automated token handling.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User (Owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"auth_token\", jsonData.token);",
									"    pm.collectionVariables.set(\"user_id\", jsonData.user.id);",
									"    console.log(\"Token saved: \" + jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Owner\",\n  \"email\": \"owner@example.com\",\n  \"password\": \"password\",\n  \"password_confirmation\": \"password\",\n  \"role\": \"owner\",\n  \"account_id\": null\n}"
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						},
						"description": "Register a new owner account. The auth token is automatically saved for subsequent requests."
					},
					"response": []
				},
				{
					"name": "Register User (Team Member)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jane Team Member\",\n  \"email\": \"member@example.com\",\n  \"password\": \"password\",\n  \"password_confirmation\": \"password\",\n  \"role\": \"team_member\",\n  \"account_id\": {{user_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						},
						"description": "Register a team member account under an owner."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"auth_token\", jsonData.token);",
									"    pm.collectionVariables.set(\"user_id\", jsonData.user.id);",
									"    console.log(\"Token saved: \" + jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@example.com\",\n  \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Login with existing credentials. The auth token is automatically saved."
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Get the authenticated user's information."
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logout"
							]
						},
						"description": "Logout and invalidate the current auth token."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration, login, and logout."
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create Building (Setup)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"building_id\", jsonData.id);",
									"    console.log(\"Building ID saved: \" + jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Downtown Office Building\",\n  \"address\": \"123 Main Street, New York, NY 10001\"\n}"
						},
						"url": {
							"raw": "http://localhost:8000/api/buildings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"buildings"
							]
						},
						"description": "Create a building for testing (Note: This endpoint needs to be implemented in your routes if not already available)"
					},
					"response": []
				},
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"task_id\", jsonData.data.id);",
									"    console.log(\"Task ID saved: \" + jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"building_id\": {{building_id}},\n  \"title\": \"Fix broken window on 3rd floor\",\n  \"description\": \"The window in room 305 is cracked and needs immediate replacement for safety reasons.\",\n  \"assigned_to\": {{user_id}},\n  \"status\": \"open\",\n  \"due_date\": \"2025-10-25\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "Create a new task. The task ID is automatically saved for subsequent requests."
					},
					"response": []
				},
				{
					"name": "List Building Tasks (No Filters)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/buildings/{{building_id}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"buildings",
								"{{building_id}}",
								"tasks"
							]
						},
						"description": "Get all tasks for a building without any filters."
					},
					"response": []
				},
				{
					"name": "List Building Tasks (Filter by Status)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/buildings/{{building_id}}/tasks?status=open",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"buildings",
								"{{building_id}}",
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "open",
									"description": "Filter by status (open, in_progress, completed, rejected)"
								}
							]
						},
						"description": "Get tasks filtered by status."
					},
					"response": []
				},
				{
					"name": "List Building Tasks (Filter by Assigned User)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/buildings/{{building_id}}/tasks?assigned_to={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"buildings",
								"{{building_id}}",
								"tasks"
							],
							"query": [
								{
									"key": "assigned_to",
									"value": "{{user_id}}",
									"description": "Filter by assigned user ID"
								}
							]
						},
						"description": "Get tasks assigned to a specific user."
					},
					"response": []
				},
				{
					"name": "List Building Tasks (Multiple Filters)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/buildings/{{building_id}}/tasks?status=open&assigned_to={{user_id}}&created_from=2025-10-01&due_date_to=2025-12-31",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"buildings",
								"{{building_id}}",
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "open"
								},
								{
									"key": "assigned_to",
									"value": "{{user_id}}"
								},
								{
									"key": "created_from",
									"value": "2025-10-01"
								},
								{
									"key": "due_date_to",
									"value": "2025-12-31"
								}
							]
						},
						"description": "Get tasks with multiple filters applied."
					},
					"response": []
				}
			],
			"description": "Task management endpoints for creating and listing tasks."
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"comment_id\", jsonData.data.id);",
									"    console.log(\"Comment ID saved: \" + jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"task_id\": {{task_id}},\n  \"content\": \"I've started working on this task. Will have it done by end of week.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						},
						"description": "Create a new comment on a task."
					},
					"response": []
				},
				{
					"name": "List Task Comments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}",
								"comments"
							]
						},
						"description": "Get all comments for a specific task, paginated and ordered by most recent first."
					},
					"response": []
				},
				{
					"name": "List Task Comments (Page 2)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}/comments?page=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}",
								"comments"
							],
							"query": [
								{
									"key": "page",
									"value": "2",
									"description": "Page number for pagination"
								}
							]
						},
						"description": "Get the second page of comments."
					},
					"response": []
				}
			],
			"description": "Comment management endpoints for creating and listing task comments."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000/api",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "building_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "task_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment_id",
			"value": "",
			"type": "string"
		}
	]
}

